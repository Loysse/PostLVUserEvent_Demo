/**
 * @file skeleton_lv_event.h
 *
 * @author
 *
 * @date
 *
 *
 *
 */

#ifndef SKELETON_LV_EVENT_H_
#define SKELETON_LV_EVENT_H_

#include <stdio.h>
#include <errno.h>
#include <signal.h>

#include <windows.h>
#include <process.h>

/* LabVIEW include */
#include "extcode.h"

/**
 * Function returning the parameters sum
 *
 * @param a first operand
 * @param b second operand
 *
 * @return a + b sum
 */
__declspec(dllexport) int32_t __stdcall
		SKL_SyncFunction(int32_t a, int32_t b);

/**
 * Stopping thread generated by the SKL_AsyncRepeatSum call
 *
 * @param pParm equivalent to the thread parameters
 */
__declspec(dllexport) void __stdcall
		SKL_Stop(uint64_t pParam);

/**
 * Return the thread count variable
 *
 * @param pParam thread handle
 */
__declspec(dllexport) int64_t __stdcall
		SKL_Thread_Count(uint64_t pParam);

/**
 * Return the thread running variable
 *
 * @param pParam thread handle
 */
__declspec(dllexport) int64_t __stdcall
		SKL_Thread_Running(uint64_t pParam);

/**
 * Return the thread sum variable
 *
 * @param pParam thread handle
 */
__declspec(dllexport) int64_t __stdcall
		SKL_Thread_Sum(uint64_t pParam);

/**
 * Return the thread lv_err variable
 *
 * @param pParam thread handle
 */
__declspec(dllexport) int64_t __stdcall
		SKL_Thread_LvErr(uint64_t pParam);

/**
 * Function returning the parameters sum with a LabVIEW event. The function SKL_Stop must be called to free the handle memory.
 *
 * @param a first operand
 * @param b second operand
 * @param ref LabVIEW reference event pointer
 *
 * @return handle to managed the thread associated.
 */
__declspec(dllexport) uint64_t  __stdcall
		SKL_AsyncSum(int32_t a, int32_t b, LVUserEventRef *ref);

/**
 * Function returning the parameters sum with a LabVIEW event in string format. The function SKL_Stop must be called to free the handle memory.
 *
 * @param a first operand
 * @param b second operand
 * @param ref LabVIEW reference event pointer
 *
 * @return handle to managed the thread associated.
 */
__declspec(dllexport) uint64_t  __stdcall
		SKL_AsyncSumToString(int32_t a, int32_t b, LVUserEventRef *ref);

/**
 * Function returning the accumulation parameters sum with a LabVIEW event. The function SKL_Stop must be called to free the handle memory.
 *
 * @param a first operand
 * @param b second operand
 * @param ref LabVIEW reference event pointer
 *
 * @return handle to managed the thread associated.
 */
__declspec(dllexport) uint64_t  __stdcall
		SKL_AsyncRepeatSum(int32_t a, int32_t b, LVUserEventRef *ref);

#endif /* SKELETON_LV_EVENT_H_ */
